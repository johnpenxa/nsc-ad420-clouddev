swagger: '2.0'
info:
  description: >-
    This is a API.  You can find out more about     Swagger at
    [http://swagger.io](http://swagger.io) or on [irc.freenode.net,
    #swagger](http://swagger.io/irc/).      For this sample, you can use the api
    key `special-key` to test the authorization     filters.
  version: 1.0.0
  title: MyAPI Swagger
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: petstore.swagger.io
basePath: /v2
tags:
  - name: user
    description: Operations about user
    externalDocs:
      description: ''
      url: 'http://swagger.io'
  - name: task
    description: Everything about your Tasks
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
schemes:
  - http
paths:
  /users:
    get:
      tags:
        - users
      summary: Search for users by user name
      description: Look up users by their user names
      operationId: userSearch
      produces:
        - application/json
      parameters:
        - name: searchString
          in: query
          description: username to search
          required: false
          type: string
      responses:
        '200':
          description: SUCCESS!!!
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '404':
          description: users not found CHANGE 404  not correct
        '503':
          description: Server Error
    post:
      tags:
        - users
      summary: Add new users to the system
      description: Add a user
      operationId: userAdd
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: newUser
          description: new user to add
          required: false
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: user created
        '405':
          description: invalid input
        '409':
          description: user already exists
        '503':
          description: user already exists
  '/users/{user_id}':
    get:
      tags:
        - users
      summary: Query a user id
      description: Search by user id
      operationId: userIdSearch
      produces:
        - application/json
      parameters:
        - name: user_id
          in: path
          description: id to look up
          required: true
          type: integer
      responses:
        '200':
          description: SUCCESS user found
          schema:
            $ref: '#/definitions/User'
        '400':
          description: invalid input
        '404':
          description: user id not found
    put:
      tags:
        - users
      summary: Update user information
      description: update user info
      operationId: updateUserInfo
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: updateUser
          description: update user info
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: user updated
        '404':
          description: user ID not found
        '405':
          description: invalid ID
    delete:
      tags:
        - users
      summary: Delete user from system
      description: delete user ID
      operationId: deleteUser
      produces:
        - application/json
      parameters:
        - name: user_id
          in: path
          description: user ID to delete
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: user deleted successfully
        '404':
          description: user ID not found
  '/users/{user_id}/tasks/':
    get:
      tags:
        - tasks
      summary: Look up a user's tasks
      description: find user's tasks
      operationId: taskSearch
      produces:
        - application/json
      parameters:
        - name: user_id
          in: path
          description: user ID
          required: true
          type: integer
        - name: tasks
          in: query
          description: task to find
          required: false
          type: string
      responses:
        '200':
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/Task'
        '400':
          description: bad input
        '404':
          description: task not found
    post:
      tags:
        - tasks
      summary: Add a task to the system
      description: add new task
      operationId: taskAdd
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: newTask
          description: new task to add
          required: false
          schema:
            $ref: '#/definitions/Task'
      responses:
        '200':
          description: task created
        '404':
          description: task not found
        '405':
          description: invalid input
  '/users/{user_id}/tasks/{id}':
    get:
      tags:
        - tasks
      summary: Look up a task by ID
      description: find a task
      operationId: taskIdSearch
      produces:
        - application/json
      parameters:
        - name: user_id
          in: path
          description: user ID
          required: true
          type: integer
        - name: id
          in: path
          description: task ID
          required: true
          type: integer
        - name: tasks
          in: query
          description: find a task
          required: false
          type: string
      responses:
        '200':
          description: task found
          schema:
            $ref: '#/definitions/Task'
        '404':
          description: task not found
    put:
      tags:
        - tasks
      summary: Update a user's task
      description: update task
      operationId: updateTask
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: updateTask
          description: task to update
          required: true
          schema:
            $ref: '#/definitions/Task'
      responses:
        '200':
          description: task updated
        '404':
          description: task ID not found
        '405':
          description: invalid ID
    delete:
      tags:
        - tasks
      summary: Delete a user's task
      description: delete task
      operationId: deleteTask
      produces:
        - application/json
      parameters:
        - name: user_id
          in: path
          description: user ID
          required: true
          type: integer
        - name: id
          in: path
          description: task ID
          required: true
          type: integer
        - name: tasks
          in: query
          description: task
          required: false
          type: string
      responses:
        '200':
          description: deleted successfully
        '404':
          description: task ID not found
        '405':
          description: invalid ID supplied
definitions:
  User:
    type: object
    properties:
      user_Id:
        type: integer
        format: int64
        example: 1234567890
      userName:
        type: string
        example: spiderman64
      firstName:
        type: string
        example: John
      lastName:
        type: string
        example: Smith
      tasks:
        type: array
        items:
          type: integer
          format: int32
  Task:
    required:
      - taskId
      - taskName
    properties:
      taskId:
        type: integer
        format: int64
        example: 987654321
      taskName:
        type: string
        example: Rotate Log files
      complete:
        type: boolean
        default: false
